<?php
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
namespace Sttl\Adaruniforms\Block;

use Magento\Customer\Model\Session;
use Magento\Framework\Exception\NoSuchEntityException;
use Magento\Framework\Json\EncoderInterface;
use Sttl\Adaruniforms\Helper\Sap;
use Sttl\Proupdated\Model\ResourceModel\Post\Collection;
use Sttl\Proupdated\Model\ReadFactory;

/**
 * Dashboard Customer Info
 *
 * @api
 * @since 100.0.2
 */
class Info extends \Magento\Framework\View\Element\Template {
	/**
	 * Cached subscription object
	 *
	 * @var \Magento\Newsletter\Model\Subscriber
	 */
	protected $_subscription;

	/**
	 * @var \Magento\Newsletter\Model\SubscriberFactory
	 */
	protected $_subscriberFactory;

	/**
	 * @var \Magento\Customer\Helper\View
	 */
	protected $_helperView;

	/**
	 * @var \Magento\Customer\Helper\Session\CurrentCustomer
	 */
	protected $currentCustomer;

	public $session;

	protected $sapHelper;

	protected $ebizHelper;

	protected $request;

	protected $DownloadLibrary;

	protected $directoryList;

	protected $filesystem;

	protected $httpContext;

	protected $PostCollection;

	protected $filterProvider;

	/**
	 * Constructor
	 *
	 * @param \Magento\Framework\View\Element\Template\Context $context
	 * @param \Magento\Customer\Helper\Session\CurrentCustomer $currentCustomer
	 * @param \Magento\Newsletter\Model\SubscriberFactory $subscriberFactory
	 * @param \Magento\Customer\Helper\View $helperView
	 * @param array $data
	 */
	public function __construct(
		\Magento\Cms\Model\Template\FilterProvider $filterProvider, 
		\Magento\Framework\View\Element\Template\Context $context,
		\Magento\Framework\App\Http\Context $httpContext,
		\Magento\Customer\Helper\Session\CurrentCustomer $currentCustomer,
		\Magento\Newsletter\Model\SubscriberFactory $subscriberFactory,
		\Magento\Customer\Helper\View $helperView,
		\Magento\Framework\App\Request\Http $request,
		\Sttl\Adaruniforms\Helper\Ebizcharge $ebizHelper,
		\ManishJoy\ChildCustomer\Model\PostFactory $postFactory,
		\Sttl\Adaruniforms\Helper\DownloadLibrary $DownloadLibrary,
		\Magento\Framework\Filesystem $filesystem,
		\Magestore\Bannerslider\Helper\Data $bannersliderHelper,
		Collection $PostCollection,
		EncoderInterface $jsonEncoder,
		Session $customerSession,
		Sap $saphelper,
		ReadFactory $ReadFactory,
		\Magestore\Bannerslider\Model\BannerFactory $bannerFactory,

		array $data = []
	) {
		$this->filterProvider = $filterProvider;
		$this->currentCustomer = $currentCustomer;
		$this->_subscriberFactory = $subscriberFactory;
		$this->sapHelper = $saphelper;
		$this->jsonEncoder = $jsonEncoder;
		$this->postFactory = $postFactory;
		$this->DownloadLibrary = $DownloadLibrary;
		$this->session = $customerSession;
		$this->_helperView = $helperView;
		$this->ebizHelper = $ebizHelper;
		$this->request = $request;
		$this->filesystem = $filesystem;
		$this->_bannerFactory = $bannerFactory;
		$this->_bannersliderHelper = $bannersliderHelper;
		$this->Collection = $PostCollection;
		$this->_ReadFactory = $ReadFactory;
		parent::__construct($context, $data);
	}

	public function gethtmlcontent($html){
		return $this->filterProvider->getPageFilter()->filter($html);
	}

	public function getReadNoJson()
    {
		$data =  $this->_ReadFactory->create()->getCollection()->addFieldToSelect('read_json')->addFieldToFilter('customer_id', $this->getCustomerId())->getData();
		if(count($data) > 0){
			return $data;
		}else{
			return [];
		}
    }
	 public function getBaseUrlMedia($img)
    {
    	return $this->_bannersliderHelper->getBaseUrlMedia($img);	
    }
	public function getBannerData($bannerid) {

		$banner = $this->_bannerFactory->create()->setStoreViewId(1)->load($bannerid);
		return $banner->getData();
	}
	public function getPostCollection() {
		
		$objectManager = \Magento\Framework\App\ObjectManager::getInstance();
		$collection = $objectManager->create('Sttl\Proupdated\Model\ResourceModel\Post\Collection')->addFieldToFilter('status', ['eq' => 1])->setOrder('sort_order', 'ASC');
		// echo "<pre>";
		// print_r($collection->getData());die;
		return $collection->getData();

	}
	public function getFullActionName() {
		try {
			return $this->request->getFullActionName();
		} catch (NoSuchEntityException $e) {
			return null;
		}
	}
	/*
		    * admin customer details
	*/
	public function getAdminCustomer() {
		try {
			return $this->session->getCustomerAsadmin();
		} catch (NoSuchEntityException $e) {
			return null;
		}
	}
	/*
		    * login customer phone number
	*/
	public function getCustomerCustomerNumber() {
		return $this->session->getCustomer()->getData('customer_number');
	}

	/*
		    * custmoer id
	*/
	public function getCustomerId() {
		return $this->session->getCustomer()->getId();
	}
	public function getCustomerInfo() {
		return $this->session->getCustomer();
	}
	/*
		    * permission Json
	*/
	public function getPermissionJson() {
		$c_id = $this->getCustomerId();
		$post = $this->postFactory->create();
		$collection = $post->getCollection()->addFieldToSelect('permission')->addFieldToFilter('c_id', $c_id);
		$permission = $collection->getData();
		$permissionarray = '';
		if ($permission) {
			$permissionarray = $permission[0]['permission'];
		}

		return $permissionarray;
	}

	/*
		    * login customer details
	*/
	public function getCustomerDetails() {
		$data = $this->sapHelper->getCustomerDetails(["CardCode", "Active", "Phone1", "BCity", "BState", "AccountBalance", "CardName", "Program", "Tier", "OpenOrder", "PaymentTerm"]);
		if (isset($data[0]) && !empty($data[0])) {
			$data = $data[0];
		}
		return $data;
	}

	public function getImage_library_directory($path) {
		return $this->DownloadLibrary->listFolderFiles($path);
	}

	public function getDirectorypath() {
		return $this->filesystem->getDirectoryRead(\Magento\Framework\App\Filesystem\DirectoryList::ROOT)->getAbsolutePath('ftp_images' . DIRECTORY_SEPARATOR);
	}

	/*
		    * login customer phone number with format
	*/
	public function getCustomerPhoneNo() {
		$customer_phone = 'N/A';
		$data = $this->getCustomerDetails();
		if (isset($data) && !isset($data['errors'])) {
			if (isset($data["Phone1"]) && !empty($data["Phone1"])) {
				$tmpPhone = preg_replace("/[^0-9]/", "", $data["Phone1"]);
				$lenPhone = strlen($tmpPhone);
				if ($lenPhone == 10) {
					$customer_phone = substr($tmpPhone, 0, 3) . '-' . substr($tmpPhone, 3, 3) . '-' . substr($tmpPhone, 6);
				} else {
					$customer_phone = str_replace([" ", "."], "-", $data["Phone1"]);
				}
			}
		}
		return $customer_phone;
	}

	/*
		    * shipping details
	*/
	public function getCustomerShippingAddressDetails() {
		return $this->sapHelper->getCustomerShippingAddressDetails();
	}
	/*
		    * ebiz customer details
	*/
	public function getEbizcustomerDetails() {
		$objCustomers = '';
		$data = $this->getCustomerDetails();
		if (isset($data) && !isset($data['errors'])) {
			$customer_number = $this->getCustomerCustomerNumber();
			$search_query = array(
				array(
					'Field' => 'CustomerID',
					'Type' => 'eq',
					'Value' => $customer_number),
			);
			if (isset($customer_number) && $customer_number != '') {
				$objCustomers = $this->ebizHelper->searchCustomerByParams($search_query, true, 0, 1);
			}
		}
		return $objCustomers;
	}

	/*
		    * ebiz customer details
	*/
	public function getSaveCardDetails() {
		$saved_cards = '';
		$data = $this->getCustomerDetails();
		if (isset($data) && !isset($data['errors'])) {
			$custNum = '';
			$objCustomers = $this->getEbizcustomerDetails();
			if (isset($objCustomers->Customers) && count($objCustomers->Customers) > 0) {
				$objCustomer = $objCustomers->Customers;
				$objCustomer = $objCustomer[0];
				if (isset($objCustomer->CustNum)) {
					$custNum = $objCustomer->CustNum;
				}
			}
			$saved_cards = (isset($objCustomer->PaymentMethods) && count($objCustomer->PaymentMethods) > 0) ? $objCustomer->PaymentMethods : array();
		}

		return $saved_cards;
	}

	public function getCountryList() {
		return $this->sapHelper->getCountryList();
	}

	public function getStateList() {
		return $this->sapHelper->getStateList();
	}

	public function getSliderHtml() {
		return $this->getLayout()->createBlock("Magestore\Bannerslider\Block\SliderItem")->setSliderId(6)->toHtml();
	}

	public function getnotificationsection() {
		return $this->getLayout()->createBlock('Magento\Cms\Block\Block')->setBlockId(61)->toHtml();
	}

	/**
	 * Returns the Magento Customer Model for this block
	 *
	 * @return \Magento\Customer\Api\Data\CustomerInterface|null
	 */
	public function getCustomer() {
		try {
			return $this->currentCustomer->getCustomer();
		} catch (NoSuchEntityException $e) {
			return null;
		}
	}

	/**
	 * Get the full name of a customer
	 *
	 * @return string full name
	 */
	public function getName() {
		return $this->_helperView->getCustomerName($this->getCustomer());
	}

	/**
	 * @return string
	 */
	public function getChangePasswordUrl() {
		return $this->_urlBuilder->getUrl('customer/account/edit/changepass/1');
	}

	/**
	 * Get Customer Subscription Object Information
	 *
	 * @return \Magento\Newsletter\Model\Subscriber
	 */
	public function getSubscriptionObject() {
		if (!$this->_subscription) {
			$this->_subscription = $this->_createSubscriber();
			$customer = $this->getCustomer();
			if ($customer) {
				$this->_subscription->loadByCustomerId($customer->getId());
			}
		}
		return $this->_subscription;
	}

	/**
	 * Gets Customer subscription status
	 *
	 * @return bool
	 *
	 * @SuppressWarnings(PHPMD.BooleanGetMethodName)
	 */
	public function getIsSubscribed() {
		return $this->getSubscriptionObject()->isSubscribed();
	}

	/**
	 * Newsletter module availability
	 *
	 * @return bool
	 */
	public function isNewsletterEnabled() {
		return $this->getLayout()
			->getBlockSingleton(\Magento\Customer\Block\Form\Register::class)
			->isNewsletterEnabled();
	}

	/**
	 * @return \Magento\Newsletter\Model\Subscriber
	 */
	protected function _createSubscriber() {
		return $this->_subscriberFactory->create();
	}

	/**
	 * @return string
	 */
	protected function _toHtml() {
		return $this->currentCustomer->getCustomerId() ? parent::_toHtml() : '';
	}
}
